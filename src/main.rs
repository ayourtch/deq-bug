use std::collections::VecDeque;

fn deq_peek_u32(ideq: &mut VecDeque<u8>) -> Option<u32> {
    let mut out: u32 = 0;
    for i in 0..4 {
        out = out << 8;
        let nxt = ideq.get(i);
        if nxt.is_none() {
            return None;
        }
        out = out + (*nxt.unwrap() as u32);
    }
    Some(out)
}

fn main() {
  let mut adeq = VecDeque::new();

  // set this to false to get rid of the bug...
  let do_reserve = true;

  // ... or this
  let do_make_contiguous = true;

  let deq = &mut adeq;
  println!("reserve 9");
  if do_reserve { deq.reserve(9); }
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 05");
  deq.push_back(5);
  println!("push : 01");
  deq.push_back(1);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 03");
  deq.push_back(3);
  if do_make_contiguous { deq.make_contiguous(); }
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  if do_make_contiguous { deq.make_contiguous(); }
  println!("reserve 14");
  if do_reserve { deq.reserve(14); }
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 0a");
  deq.push_back(10);
  println!("push : 10");
  deq.push_back(16);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 01");
  deq.push_back(1);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 01");
  deq.push_back(1);
  println!("push : 2e");
  deq.push_back(46);
  if do_make_contiguous { deq.make_contiguous(); }
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  if do_make_contiguous { deq.make_contiguous(); }
  println!("reserve 25");
  if do_reserve { deq.reserve(25); }
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 15");
  deq.push_back(21);
  println!("push : 0b");
  deq.push_back(11);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 02");
  deq.push_back(2);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 0c");
  deq.push_back(12);
  println!("push : 2f");
  deq.push_back(47);
  println!("push : 68");
  deq.push_back(104);
  println!("push : 6f");
  deq.push_back(111);
  println!("push : 6d");
  deq.push_back(109);
  println!("push : 65");
  deq.push_back(101);
  println!("push : 2f");
  deq.push_back(47);
  println!("push : 75");
  deq.push_back(117);
  println!("push : 62");
  deq.push_back(98);
  println!("push : 75");
  deq.push_back(117);
  println!("push : 6e");
  deq.push_back(110);
  println!("push : 74");
  deq.push_back(116);
  println!("push : 75");
  deq.push_back(117);
  println!("deq len: {}", deq.len());
  if do_make_contiguous { deq.make_contiguous(); }
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  println!("deq len: {}", deq.len());
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  println!("BUG ^^^");
  println!("deq len: {}", deq.len());
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  let x = deq.pop_front();
  println!("pop: {:02x?}", x);
  println!("deq len: {}", deq.len());
  if do_make_contiguous { deq.make_contiguous(); }
  println!("deq len: {}", deq.len());
  println!("reserve 17");
  if do_reserve { deq.reserve(17); }
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 0d");
  deq.push_back(13);
  println!("push : 0c");
  deq.push_back(12);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 03");
  deq.push_back(3);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 04");
  deq.push_back(4);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 00");
  deq.push_back(0);
  println!("push : 01");
  deq.push_back(1);
  if do_make_contiguous { deq.make_contiguous(); }

  println!("deq peek: {:08x?}", deq_peek_u32(deq));
  println!("deq len: {}", deq.len());
  println!("deq: {:02x?}", &deq);
}
